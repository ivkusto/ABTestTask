{"version":3,"sources":["FlightDirector/Consts/sizes.ts","FlightDirector/Consts/colors.ts","FlightDirector/Objects/background.ts","FlightDirector/Utils/angle.ts","FlightDirector/Objects/pitchLevel.ts","FlightDirector/Objects/rollLevel.ts","FlightDirector/Objects/rotateCamera.ts","FlightDirector/Utils/transform.ts","FlightDirector/Objects/axis.ts","FlightDirector/FlightDirector.ts","index.ts"],"names":[],"mappings":";AAsCG,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,KAAA,QAAA,MAAA,QAAA,YAAA,QAAA,sBAAA,QAAA,oBAAA,EArCH,IAAM,EAAiB,IAgCpB,QAAA,eAAA,EA/BH,IAAM,EAAwB,GAgC3B,QAAA,sBAAA,EA/BH,IAAM,EAAc,CACjB,MAAO,GACP,OAAQ,IACR,OAAQ,KA6BR,QAAA,YAAA,EA3BH,IAAM,EAAQ,CACX,WAAY,KACZ,eAAgB,GAChB,eAAgB,IAChB,gBAAiB,GACjB,gBAAiB,GACjB,UAAW,IACX,YAAa,IACb,mBAAoB,IAoBpB,QAAA,MAAA,EAlBH,IAAM,EAAO,CACV,WAAY,KACZ,eAAgB,IAChB,eAAgB,KAChB,MAAO,KAAK,GACZ,EAAG,GACH,gBAAiB,GACjB,gBAAiB,GACjB,UAAW,KAWX,QAAA,KAAA,EATH,IAAM,EAAY,CACf,OAAQ,IACR,MAAO,KAQP,QAAA,YAAA;;ACtCU,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAAA,QAAA,OAAS,CACnB,IAAK,UACL,QAAS,UACT,OAAQ,UACR,MAAO,UACP,WAAW;;ACDd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAJA,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,oBAGA,SAAgB,EAAe,EAA+B,GACrD,IAAA,EAAQ,KAAK,KAChB,KAAK,KACF,KAAK,IAAI,EAAM,MAAQ,EAAG,GAAK,KAAK,IAAI,EAAM,cAAe,KAE7D,EAAS,EAAM,OAErB,EAAI,UAAY,EAAA,OAAO,IACvB,EAAI,UAAU,EAAiB,GAAT,EAAoB,EAAR,EAAoB,EAAT,GAG7C,EAAI,UAAU,EAAgB,EAAT,EAAoB,EAAR,EAAW,GAG5C,EAAI,UAAY,EAAA,OAAO,OACvB,EAAI,UAAU,EAAO,EAAW,EAAR,EAAoB,EAAT,GAGnC,EAAI,UAAU,EAAiB,GAAT,EAAoB,EAAR,EAAW,GAGvC,IAAA,EAAqB,EAAM,OAAS,EAAA,eAC1C,EAAI,UAAY,EAAA,OAAO,QACvB,EAAI,UAAU,EAAO,EAAI,EAAqB,EAAW,EAAR,EAAW,GAvB/D,QAAA,eAAA;;ACDA,aAHA,SAAgB,EAAY,GAClB,OAAA,EAAS,KAAK,GAAK,IAE7B,SAAgB,EAAY,GACnB,IAAA,EAAkB,IAAN,EAAY,KAAK,GAAM,IAClC,OAAA,GAAY,IAAM,EAAW,EAAY,IAFnD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,iBAAA,EAHA,QAAA,YAAA,EAGA,QAAA,YAAA;;ACEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EALA,IAAA,EAAA,QAAA,oBACA,EAAA,QAAA,mBAEA,EAAA,QAAA,kBAEA,SAAgB,EAAW,EAA+B,GACjD,IAAA,EAAS,EAAM,OACrB,EAAI,UAAY,EAAA,MAAM,WAAa,EAAM,MACnC,IAAA,EAAe,EAAA,MAAM,eAAiB,EAAM,MAC5C,EAAe,EAAA,MAAM,eAAiB,EAAM,MAClD,EAAI,YAAc,EAAA,OAAO,WACzB,EAAI,YACJ,EAAI,UAAY,OAChB,EAAI,aAAe,SACnB,EAAI,KAAc,OAAA,OAAA,EAAA,MAAM,UAAY,EAAM,MAA1C,YACA,EAAI,UAAY,EAAA,OAAO,WAUlB,IARC,IAAA,EAAQ,KAAK,MAChB,KAAK,KAAK,IAAK,EAAA,YAAY,EAAM,OAAS,EAAA,MAAM,oBAAsB,EAAA,MAAM,iBAC3E,EAAA,MAAM,gBAEJ,EAAM,KAAK,MACd,KAAK,IAAI,IAAK,EAAA,YAAY,EAAM,OAAS,EAAA,MAAM,oBAAsB,EAAA,MAAM,iBAC1E,EAAA,MAAM,gBAED,EAAI,EAAO,GAAK,EAAK,GAAK,EAAA,MAAM,gBAAiB,CACjD,IAAA,EAAQ,EAAI,EAAA,MAAM,iBAAoB,EACtC,EAAY,EAAQ,EAAe,EACzC,EAAI,QAAQ,EAAY,EAAG,EAAI,EAAS,EAAI,KAC5C,EAAI,OAAO,EAAY,EAAG,EAAI,EAAS,EAAI,KACvC,GACD,EAAI,SAAS,EAAE,WAAY,EAAY,EAAI,EAAA,MAAM,YAAc,EAAM,MAAO,EAAI,EAAS,EAAI,KAGnG,EAAI,SA7BP,QAAA,WAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EALA,IAAA,EAAA,QAAA,oBACA,EAAA,QAAA,mBAEA,EAAA,QAAA,kBAEA,SAAgB,EAAU,EAA+B,GACvC,EAAM,OACrB,EAAI,UAAY,EAAA,KAAK,WAAa,EAAM,MAClC,IAAA,EAAoB,IAAV,KAAK,GACrB,EAAI,YAAc,EAAA,OAAO,WACzB,EAAI,YACE,IAAA,EAAS,EAAM,MAAQ,EAAA,KAAK,EAClC,EAAI,IAAI,EAAG,EAAG,EAAQ,EAAU,EAAA,KAAK,MAAO,EAAU,EAAA,KAAK,OACrD,IAAA,EAAe,EAAA,KAAK,eAAiB,EAAM,MAC3C,EAAe,EAAA,KAAK,eAAiB,EAAM,MAEjD,EAAI,UAAY,SAChB,EAAI,aAAa,SACjB,EAAI,KAAc,OAAA,OAAA,EAAA,KAAK,UAAU,EAAM,MAAvC,YACA,EAAI,UAAU,EAAA,OAAO,WAEhB,IAAA,IAAI,EAAI,EAAA,aAAc,EAAA,KAAK,OAC7B,EAAI,EAAA,YAAa,EAAA,KAAK,OACtB,GAAK,EAAA,KAAK,gBAAiB,CACrB,IAAA,EAAM,EAAA,YAAY,GAClB,EAAW,EAAI,EAAA,KAAK,iBAAoB,EACxC,EAAc,EAAW,EAAe,EAC9C,EAAI,OAAO,GAEX,EAAI,OAAO,GAAI,GACf,EAAI,OAAO,GAAI,EAAS,GACpB,GACD,EAAI,SAAS,EAAE,WAAY,GAAI,EAAS,GAG3C,EAAI,QAAQ,GAEf,EAAI,SAhCP,QAAA,UAAA;;ACHA,aAAA,SAAgB,EAAa,EAAkB,GACrC,OAAA,SAAC,EAA+B,GAC9B,IAAA,EAAmB,EAAM,MAAQ,EAAM,OAAS,EAAI,KAAK,GAC/D,EAAI,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GAEhC,EAAI,UAAU,EAAM,MAAQ,EAAG,EAAM,eAErC,EAAI,QAAQ,EAAM,MACb,GAEF,EAAI,UAAU,GAAK,GAGtB,EAAO,QAAQ,SAAA,GAAe,OAAA,EAAY,EAAK,KAE/C,EAAI,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,IAftC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAAA,QAAA,aAAA;;ACIA,aAAA,SAAgB,EAAiB,EAAW,EAAW,GAE9C,IAAA,EAAK,KAAK,IAAI,GACd,EAAK,KAAK,IAAI,GACb,MAAA,CAAC,EAAI,GAAK,EAAI,EAAI,EAAG,GAJ/B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,sBAAA,EAAA,QAAA,iBAAA;;ACDA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EALA,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,oBACA,EAAA,QAAA,sBAGA,SAAgB,EAAS,EAA+B,GAErD,EAAI,aAAJ,MAAA,EAAoB,EAAA,EAAA,iBAAiB,EAAG,EAAM,MAAQ,EAAG,EAAM,iBACzD,IAAA,EAAc,EAAM,OAAS,EAAA,YAAY,OACzC,EAAa,EAAM,MAAQ,EAAA,YAAY,MACvC,EAAc,EAAM,MAAQ,EAAA,YAAY,OAE9C,EAAI,UAAY,EAAA,OAAO,MACvB,EAAI,UAAU,EAAM,MAAQ,EAAI,GAAc,EAAc,EACvD,EACA,GAEL,EAAI,SAAS,EAAM,MAAQ,EAAI,EAAa,GAAc,EAAc,EACnE,EACA,GAGL,EAAI,UAAU,EAAc,GAAI,EAAc,EACzC,EACA,GAGL,EAAI,YACE,IAAA,EAAS,EAAA,KAAK,EAAI,EAAM,MACxB,EAAe,EAAA,YAAY,OAAS,EAAM,MAC1C,EAAc,EAAA,YAAY,MAAQ,EAAM,MAC9C,EAAI,OAAO,GAAI,GACf,EAAI,QAAQ,EAAc,GAAI,EAAS,GACvC,EAAI,OAAO,EAAc,GAAI,EAAS,GACtC,EAAI,OAAO,GAAI,GACf,EAAI,OA9BP,QAAA,SAAA;;ACqBA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EA1BA,IAAA,EAAA,QAAA,kBACA,EAAA,QAAA,wBACA,EAAA,QAAA,wBACA,EAAA,QAAA,uBACA,EAAA,QAAA,0BACA,EAAA,QAAA,kBAWM,EAAmB,CACtB,EAAA,aAAa,CACV,EAAA,eACA,EAAA,aAEH,EAAA,aAAa,CACV,EAAA,YACA,GACH,EAAA,UAEU,EAAA,WAKE,SAAA,EAAA,GAAyB,IAAA,EAAA,KAAA,EAAA,KAAA,GAJ7B,KAAA,MAAgB,EAChB,KAAA,OAAiB,EA4BzB,KAAA,QAAU,SAAC,GACR,EAAK,MAAQ,EACb,OAAO,sBAAsB,WAAM,OAAA,EAAK,aAG3C,KAAA,SAAW,SAAC,GACT,EAAK,OAAS,EACd,OAAO,sBAAsB,WAAM,OAAA,EAAK,aA/BnC,KAAA,KAAO,EAAO,WAAW,MACzB,KAAA,QAAU,EACV,KAAA,oBACA,KAAA,SATX,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UAWkB,MAAA,WAAA,IAAA,EAAA,KACN,EAAS,KAAK,QAAQ,aACtB,EAAQ,CACX,KAAM,KAAK,MACX,MAAO,KAAK,OACZ,MAAO,KAAK,QAAQ,YACpB,OAAA,EACA,cAAe,EAAS,EAAA,uBAGtB,KAAA,KAAK,UAAU,EAAG,EAAG,KAAK,QAAQ,MAAO,KAAK,QAAQ,QAC3D,EAAO,QAAQ,SAAA,GAAe,OAAA,EAAY,EAAK,KAAM,OAtB3D,CAAA,IAAA,SAwBS,MAAA,WACE,KAAA,QAAQ,MAAQ,KAAK,QAAQ,YAC7B,KAAA,QAAQ,OAAS,KAAK,QAAQ,aAC9B,KAAA,YA3BX,CAAA,IAAA,oBAwCoB,MAAA,WAAA,IAAA,EAAA,KACd,OAAO,SAAW,WACf,EAAK,cA1Cd,EAAa,GAAb,QAAA,eAAA;;ACCC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3BD,IAAA,EAAA,QAAA,mCACA,EAAA,QAAA,gCAIA,SAAS,IACA,IAAA,EAAS,SAAS,eAAe,OACjC,EAAK,IAAI,EAAA,eAAe,GAYrB,SAAA,EAA4C,GAC5C,IAAA,EAAS,EAAM,OAA4B,MAC5C,KAAA,KAAK,KAAK,QAAQ,MAAM,MAAQ,GAEd,SAAtB,KAAK,QAAQ,KACT,EAAG,QACH,EAAG,UAAU,EAAA,YAAY,SAAS,EAAO,MAd3C,CAAA,aACA,aACA,cACA,eACD,IAAI,SAAC,GAAO,OAAA,SAAS,eAAe,KAClC,QAAQ,SAAC,GAAyB,OAAA,EAAG,iBAAiB,QAAS,KAbzE,OAAO,iBAAiB,OAAQ","file":"src.f4b8dfb7.js","sourceRoot":"..\\src","sourcesContent":["\r\nconst HORIZON_HEIGHT = 0.01;\r\nconst SKY_SCREEN_PROPORTION = 0.8;\r\nconst X_AXIS_MARK = {\r\n   width: 0.2,\r\n   height: 0.01,\r\n   offset: 0.03\r\n};\r\nconst PITCH = {\r\n   LINE_WIDTH: 0.005,\r\n   BIG_MARK_WIDTH: 0.3,\r\n   MID_MARK_WIDTH: 0.15,\r\n   MID_STEP_DEGREE: 10,\r\n   BIG_STEP_DEGREE: 20,\r\n   FONT_SIZE: 0.04,\r\n   FONT_OFFSET: 0.01,\r\n   MAX_VISIBLE_DEGREE: 30\r\n};\r\nconst ROLL = {\r\n   LINE_WIDTH: 0.005,\r\n   BIG_MARK_WIDTH: 0.05,\r\n   MID_MARK_WIDTH: 0.025,\r\n   ANGLE: Math.PI,\r\n   R: 0.5,\r\n   MID_STEP_DEGREE: 10,\r\n   BIG_STEP_DEGREE: 20,\r\n   FONT_SIZE: 0.04\r\n};\r\nconst Y_AXIS_MARK={\r\n   HEIGHT: 0.08,\r\n   WIDTH: 0.04\r\n};\r\nexport {\r\n   HORIZON_HEIGHT,\r\n   SKY_SCREEN_PROPORTION,\r\n   X_AXIS_MARK,\r\n   PITCH,\r\n   ROLL,\r\n   Y_AXIS_MARK\r\n};\r\n","export const Colors = {\r\n   sky: '#66AFEE',\r\n   horizon: '#a7b3c3',\r\n   ground: '#30170F',\r\n   xAxis: '#FDDC1A',\r\n   scaleColor:'#FFFFFF'\r\n};","import { HORIZON_HEIGHT } from \"../Consts/sizes\";\r\nimport { Colors } from \"../Consts/colors\";\r\nimport { IState } from \"../FlightDirector\";\r\n\r\nexport function drawBackground(ctx: CanvasRenderingContext2D, state: IState) {\r\n   const width = Math.ceil(\r\n      Math.sqrt(\r\n         Math.pow(state.width / 2, 2) + Math.pow(state.horizonOffset, 2)\r\n      ));\r\n   const height = state.height;\r\n   // sky\r\n   ctx.fillStyle = Colors.sky;\r\n   ctx.fillRect(-width, -height * 2, width * 2, height * 2);\r\n\r\n   // extra sky\r\n   ctx.fillRect(-width, height * 2, width * 2, height);\r\n\r\n   // ground\r\n   ctx.fillStyle = Colors.ground;\r\n   ctx.fillRect(-width, 0, width * 2, height * 2);\r\n\r\n   // extra ground\r\n   ctx.fillRect(-width, -height * 3, width * 2, height);\r\n\r\n   // horizon\r\n   const horizonPixelHeight = state.height * HORIZON_HEIGHT;\r\n   ctx.fillStyle = Colors.horizon;\r\n   ctx.fillRect(-width, 0 - horizonPixelHeight / 2, width * 2, horizonPixelHeight);\r\n}","export function degreeToRad(degree: number): number {\r\n   return degree * Math.PI / 180;\r\n}\r\nexport function radToDegree(rad: number): number {\r\n   const degree360= (rad * 180 / Math.PI) % 360;\r\n   return degree360<= 180 ? degree360: degree360 - 360;\r\n}\r\n","import { Colors } from \"../Consts/colors\";\r\nimport { PITCH } from \"../Consts/sizes\";\r\nimport { IState } from \"../FlightDirector\";\r\nimport { radToDegree } from \"../Utils/angle\";\r\n\r\nexport function pitchLevel(ctx: CanvasRenderingContext2D, state: IState) {\r\n   const height = state.height;\r\n   ctx.lineWidth = PITCH.LINE_WIDTH * state.width;\r\n   const bigMarkWidth = PITCH.BIG_MARK_WIDTH * state.width;\r\n   const midMarkWidth = PITCH.MID_MARK_WIDTH * state.width;\r\n   ctx.strokeStyle = Colors.scaleColor;\r\n   ctx.beginPath();\r\n   ctx.textAlign = \"left\";\r\n   ctx.textBaseline = \"middle\";\r\n   ctx.font = `100 ${PITCH.FONT_SIZE * state.width}px serif`;\r\n   ctx.fillStyle = Colors.scaleColor;\r\n\r\n   const start = Math.floor(\r\n      Math.max(-180, radToDegree(state.pitch) - PITCH.MAX_VISIBLE_DEGREE) / PITCH.MID_STEP_DEGREE\r\n   ) * PITCH.MID_STEP_DEGREE;\r\n\r\n   const end = Math.floor(\r\n      Math.min(180, radToDegree(state.pitch) + PITCH.MAX_VISIBLE_DEGREE) / PITCH.MID_STEP_DEGREE\r\n   ) * PITCH.MID_STEP_DEGREE;\r\n\r\n   for (let i = start; i <= end; i += PITCH.MID_STEP_DEGREE) {\r\n      const isBig = i % PITCH.BIG_STEP_DEGREE === 0;\r\n      const markWidth = isBig ? bigMarkWidth : midMarkWidth;\r\n      ctx.moveTo(-markWidth / 2, i * height * 2 / 180);\r\n      ctx.lineTo(markWidth / 2, i * height * 2 / 180);\r\n      if (isBig) {\r\n         ctx.fillText(i.toString(), markWidth / 2 + PITCH.FONT_OFFSET * state.width, i * height * 2 / 180);\r\n      }\r\n   }\r\n   ctx.stroke();\r\n}","import { Colors } from \"../Consts/colors\";\r\nimport { ROLL } from \"../Consts/sizes\";\r\nimport { IState } from \"../FlightDirector\";\r\nimport { degreeToRad, radToDegree } from \"../Utils/angle\";\r\n\r\nexport function rollLevel(ctx: CanvasRenderingContext2D, state: IState) {\r\n   const height = state.height;\r\n   ctx.lineWidth = ROLL.LINE_WIDTH * state.width;\r\n   const OYAngle = Math.PI * 1.5;\r\n   ctx.strokeStyle = Colors.scaleColor;\r\n   ctx.beginPath();\r\n   const pixelR = state.width * ROLL.R;\r\n   ctx.arc(0, 0, pixelR, OYAngle - ROLL.ANGLE, OYAngle + ROLL.ANGLE);\r\n   const bigMarkWidth = ROLL.BIG_MARK_WIDTH * state.width;\r\n   const midMarkWidth = ROLL.MID_MARK_WIDTH * state.width;\r\n\r\n   ctx.textAlign = \"center\";\r\n   ctx.textBaseline=\"bottom\";\r\n   ctx.font = `100 ${ROLL.FONT_SIZE*state.width}px serif`;\r\n   ctx.fillStyle=Colors.scaleColor;\r\n\r\n   for (let i = radToDegree(- ROLL.ANGLE);\r\n      i < radToDegree( ROLL.ANGLE);\r\n      i += ROLL.MID_STEP_DEGREE) {\r\n      const rad = degreeToRad(i);\r\n      const needText = i % ROLL.BIG_STEP_DEGREE === 0;\r\n      const strokeWidth = needText ? bigMarkWidth : midMarkWidth;\r\n      ctx.rotate(rad);\r\n\r\n      ctx.moveTo(0, -pixelR);\r\n      ctx.lineTo(0, -pixelR - strokeWidth);\r\n      if (needText) {\r\n         ctx.fillText(i.toString(), 0, -pixelR - strokeWidth);\r\n      }\r\n\r\n      ctx.rotate(-rad);\r\n   }\r\n   ctx.stroke();\r\n}\r\n","import { IState, TLayer } from \"../FlightDirector\";\r\n\r\nexport function rotateComera(layers: TLayer[], withoutPinch?:boolean) {\r\n   return (ctx: CanvasRenderingContext2D, state: IState) =>{\r\n      const pitchPixelOffset = state.pitch * state.height * 2 / Math.PI;\r\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n      // translate to camera center\r\n      ctx.translate(state.width / 2, state.horizonOffset);\r\n      // apply roll\r\n      ctx.rotate(-state.roll);\r\n      if (!withoutPinch){\r\n         // apply pitch\r\n         ctx.translate(0, - pitchPixelOffset);\r\n      }\r\n      // render child layers\r\n      layers.forEach(renderLayer => renderLayer(ctx, state));\r\n\r\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n   };\r\n}","/**\r\n * get arguments for setTranform\r\n * @param r - rotate angle\r\n * @param x - translateX value\r\n * @param y - translateY value\r\n */\r\nexport function getTransformArgs(r: number, x: number, y: number)\r\n   : [number, number, number, number, number, number] {\r\n   const xx = Math.cos(r);\r\n   const xy = Math.sin(r);\r\n   return [xx, xy, -xy, xx, x, y];\r\n}\r\n","import { ROLL, X_AXIS_MARK, Y_AXIS_MARK } from \"../Consts/sizes\";\r\nimport { Colors } from \"../Consts/colors\";\r\nimport { getTransformArgs } from \"../Utils/transform\";\r\nimport { IState } from \"../FlightDirector\";\r\n\r\nexport function drawAxis(ctx: CanvasRenderingContext2D, state: IState) {\r\n\r\n   ctx.setTransform(...getTransformArgs(0, state.width / 2, state.horizonOffset));\r\n   const pixelHeight = state.height * X_AXIS_MARK.height;\r\n   const pixelWidth = state.width * X_AXIS_MARK.width;\r\n   const pixelOffset = state.width * X_AXIS_MARK.offset;\r\n   // leftX\r\n   ctx.fillStyle = Colors.xAxis;\r\n   ctx.fillRect(-state.width / 2 + pixelOffset, -pixelHeight / 2\r\n      , pixelWidth\r\n      , pixelHeight);\r\n   // rightX\r\n   ctx.fillRect(state.width / 2 - pixelWidth - pixelOffset, -pixelHeight / 2\r\n      , pixelWidth\r\n      , pixelHeight);\r\n\r\n   // centerX\r\n   ctx.fillRect(-pixelHeight / 2, -pixelHeight / 2\r\n      , pixelHeight\r\n      , pixelHeight);\r\n\r\n   // YMark\r\n   ctx.beginPath();\r\n   const pixelR = ROLL.R * state.width;\r\n   const yPixelHeight = Y_AXIS_MARK.HEIGHT * state.width;\r\n   const yPixelWidth = Y_AXIS_MARK.WIDTH * state.width;\r\n   ctx.moveTo(0, -pixelR);\r\n   ctx.lineTo(-yPixelWidth / 2, -pixelR - yPixelHeight);\r\n   ctx.lineTo(yPixelWidth / 2, -pixelR - yPixelHeight);\r\n   ctx.lineTo(0, -pixelR);\r\n   ctx.fill();\r\n}","import { SKY_SCREEN_PROPORTION } from \"./Consts/sizes\";\r\nimport { drawBackground } from \"./Objects/background\";\r\nimport { pitchLevel } from \"./Objects/pitchLevel\";\r\nimport { rollLevel } from \"./Objects/rollLevel\";\r\nimport { rotateComera } from \"./Objects/rotateCamera\";\r\nimport { drawAxis } from \"./Objects/axis\";\r\n\r\nexport interface IState {\r\n   roll: number;\r\n   pitch: number;\r\n   width: number;\r\n   height: number;\r\n   horizonOffset: number;\r\n}\r\nexport type TLayer =\r\n   (ctx: CanvasRenderingContext2D, state?: IState) => void;\r\nconst Layers: TLayer[] = [\r\n   rotateComera([\r\n      drawBackground,\r\n      pitchLevel\r\n   ]),\r\n   rotateComera([\r\n      rollLevel\r\n   ], true),\r\n   drawAxis\r\n];\r\nexport class FlightDirector {\r\n   private _roll: number = 0;\r\n   private _pitch: number = 0;\r\n   private _ctx: CanvasRenderingContext2D;\r\n   private _canvas: HTMLCanvasElement;\r\n   constructor(canvas: HTMLCanvasElement) {\r\n      this._ctx = canvas.getContext('2d');\r\n      this._canvas = canvas;\r\n      this._addResizeHandler();\r\n      this.resize();\r\n   }\r\n   private _render() {\r\n      const height = this._canvas.clientHeight;\r\n      const state = {\r\n         roll: this._roll,\r\n         pitch: this._pitch,\r\n         width: this._canvas.clientWidth,\r\n         height,\r\n         horizonOffset: height * SKY_SCREEN_PROPORTION\r\n      };\r\n\r\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n      Layers.forEach(renderLayer => renderLayer(this._ctx, state));\r\n   }\r\n   resize() {\r\n      this._canvas.width = this._canvas.offsetWidth;\r\n      this._canvas.height = this._canvas.offsetHeight;\r\n      this._render();\r\n   }\r\n\r\n   setRoll = (roll: number) => {\r\n      this._roll = roll;\r\n      window.requestAnimationFrame(() => this._render());\r\n   }\r\n\r\n   setPitch = (pitch: number) => {\r\n      this._pitch = pitch;\r\n      window.requestAnimationFrame(() => this._render());\r\n   }\r\n\r\n   _addResizeHandler() {\r\n      window.onresize = () => {\r\n         this.resize();\r\n      };\r\n   }\r\n}\r\n\r\n\r\n\r\n","import { FlightDirector } from \"./FlightDirector/FlightDirector\";\r\nimport { degreeToRad } from \"./FlightDirector/Utils/angle\";\r\n\r\nwindow.addEventListener(\"load\", main);\r\n\r\nfunction main() {\r\n   const canvas = document.getElementById('cvs') as HTMLCanvasElement;\r\n   const FD = new FlightDirector(canvas);\r\n   addRollPitchChangeHandler();\r\n   function addRollPitchChangeHandler() {\r\n      [\r\n         'roll-range',\r\n         'roll-input',\r\n         'pitch-range',\r\n         'pitch-input'\r\n      ].map((id) => document.getElementById(id))\r\n         .forEach((el: HTMLInputElement) => el.addEventListener('input', valueChangeCallback));\r\n   }\r\n\r\n   function valueChangeCallback(this: HTMLInputElement, event: Event) {\r\n      const value = (event.target as HTMLInputElement).value;\r\n      this.form[this.dataset.bind].value = value;\r\n\r\n      (this.dataset.type === 'roll'\r\n         ? FD.setRoll\r\n         : FD.setPitch)(degreeToRad(parseInt(value, 10)));\r\n   }\r\n}\r\n\r\n"]}